import java.util.Date;
import java.util.Random;

public class Sorting {
	public static void main(String[] args) {
		int arraySizeInput=20000;
		int[] inputArray = new int[arraySizeInput];
		int[] outputArray = new int[arraySizeInput];
		Random random = new Random();
		System.out.println("Input: ");
		for(int i=0;i<arraySizeInput;i++) {
			inputArray[i] = random.nextInt(100);
			System.out.print(inputArray[i]+" ");
		}
		System.out.println();
		Date d1 = new Date();
		outputArray = insertionSort(inputArray);
		Date d2 = new Date();
		System.out.println("Perfromance of Insertion sort"+ (d2.getTime()-d1.getTime())+" ms");
		
		Date d3 = new Date();
		outputArray = mergeDivide(inputArray);
		Date d4 = new Date();
		System.out.println("Perfromance of Merge sort"+ (d4.getTime()-d3.getTime())+" ms");
		
		Date d5 = new Date();
		outputArray = quickSort(inputArray);
		Date d6 = new Date();
		System.out.println("Perfromance of In place Quick sort"+ (d6.getTime()-d5.getTime())+" ms");
		
		Date d7 = new Date();
		outputArray = medianSort(inputArray);
		Date d8 = new Date();
		System.out.println("Perfromance of Median of three Quick sort and Insertion  sort"+ (d8.getTime()-d7.getTime())+" ms");
	}
	
	public static int[] insertionSort ( int arr[]){
		int n = arr.length;
		for(int i=1 ; i<n ; i++ ){
			int key = arr[i];
			int j= i-1;
			while( j>=0  && arr[j] >key ){
				arr[j+1] = arr[j];
				j--;
			}
			arr[j+1] = key ;
		}
		return arr;
	}
	
	public static int[] mergeDivide(int[] array) {
		int size = array.length;
        if (size <= 1) {
        	return array;
        }
        int[] left = new int[size/2];
        int[] right = new int[size - size/2];
        for (int i = 0; i < left.length; i++) {
            left[i] = array[i];
        }
        for (int i = 0; i < right.length; i++){
            right[i] = array[i + size/2];
        }
        return merge(mergeDivide(left),mergeDivide(right));
	}
	private static int[] merge(int[] left, int[] right) {
        int[] temp = new int[left.length + right.length];
        int i = 0, j = 0;
        for (int k = 0; k < temp.length; k++){
            if(i >= left.length){
            	temp[k] = right[j++];
            }
            else if (j >= right.length){
            	temp[k] = left[i++];
            }
            else if (left[i] <= right[j]){
            	temp[k] = left[i++];
            }
            else {
            	temp[k] = right[j++];
            }
        }
        return temp;
    }
	
	
}
